{% if section.settings.enable_section and request.page_type == 'product' and product.available %}
  {% liquid
    assign current_variant = product.selected_or_first_available_variant
    assign product_form_id = 'product-form-' | append: section.id
    assign image = current_variant.image | default: product.featured_image
    assign fly_to_cart_image = ''
    if image
      assign fly_to_cart_image = image | image_url: width: 120
    endif
    assign variant_option_count = 0
    unless product.has_only_default_variant
      assign variant_option_count = product.options_with_values | size
    endunless
  %}

  <style>
    /* =========================
       STICKY BAR CONTAINER
       ========================= */
    #md-sticky-atc{
      position: fixed;
      inset: auto 0 0 0;
      z-index: 17; /* Higher than header overlay (16) to ensure it appears above bottom menu */
      border-top: 0.1rem solid rgba(var(--color-foreground), .08);

      padding-top: {{ section.settings.pt }}rem;
      padding-bottom: {{ section.settings.pb }}rem;
      visibility: hidden;
      opacity: 0;
      transform: translateY(100%);
      transition: transform .15s ease-out, opacity .15s ease-out, visibility .15s ease-out;
      pointer-events: none;
      isolation: isolate;
    }
    
    /* Adjust positioning when bottom navigation bar is enabled */
    body:has(.bottom-menu) #md-sticky-atc {
      bottom: var(--bottom-menu-height, 0px);
    }
    #md-sticky-atc.show{
      visibility: visible;
      opacity: 1;
      transform: translateY(0);
      pointer-events: auto;
    }

    /* Remove any scheme overlay translucency behind the bar */
    #md-sticky-atc.color-scheme::before,
    #md-sticky-atc[class*="color-"]::before{ content:none !important; display:none !important; }

    /* Hide on desktop when mobile-only is enabled */
    {% if section.settings.mobile_only %}
    @media (min-width: 990px){
      #md-sticky-atc{
        display: none !important;
      }
    }
    {% endif %}

    /* Opaque background layer */
    #md-sticky-atc .md-sticky-atc__bg{
      position: absolute;
      inset: 0;
      z-index: 1;
      background-color: var(--color-background) !important;
      background-image: none !important;
      mix-blend-mode: normal !important;
      -webkit-backdrop-filter: none !important;
      backdrop-filter: none !important;
      pointer-events: none;
    }
    #md-sticky-atc .md-sticky-atc__inner{ position: relative; z-index: 2; }

    /* =========================
       LAYOUT
       ========================= */
    #md-sticky-atc .page-width{
      max-width: var(--page-width);
      margin: 0 auto;
      padding: 0 var(--page-margin);
    }
    #md-sticky-atc .page-width-inner{
      display: grid;
      gap: .75rem;
      grid-template-columns: 1fr;
      grid-template-areas:
        "content"
        "controls";
    }
    /* Remove gap and padding when all optional elements are disabled */
    #md-sticky-atc.no-variant.no-qty.no-product-info{
      padding-top: 0.5rem;
      padding-bottom: 0.5rem;
    }
    #md-sticky-atc.no-variant.no-qty.no-product-info .page-width-inner{
      gap: 0;
    }

    /* Product summary (image + text) */
    #md-sticky-atc .product-content{
      grid-area: content;
      display: flex;
      align-items: center;
      gap: .75rem;
      min-width: 0;
      flex: 1;
    }
    #md-sticky-atc .sticky-product-media{
      display: flex;
      align-items: center;
      gap: .75rem;
      min-width: 0;
      flex: 1;
    }
    #md-sticky-atc .sticky-product-media img{
      width: 60px;
      height: 60px;
      object-fit: cover;
      border-radius: 6px;
      flex-shrink: 0;
    }
    #md-sticky-atc .sticky-product-info{
      display: flex;
      flex-direction: column;
      min-width: 0;
      flex: 1;
    }
    #md-sticky-atc .sticky-product-title{
      font-size: 0.95rem;
      line-height: 1.2;
      color: var(--color-foreground);
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      margin: 0;
      font-family: var(--button-font-family-primary);
      font-weight: var(--button-font-weight-primary);
    }
    #md-sticky-atc .sticky-product-price{
      font-size: .9rem;
      color: var(--color-foreground);
      margin-top: .2rem;
      font-family: var(--button-font-family-primary);
      font-weight: var(--button-font-weight-primary);
    }

    /* Controls wrapper (default: variant + qty above button on mobile) */
    #md-sticky-atc .product-form{ grid-area: controls; }
    #md-sticky-atc .product-form__controls{
      display: grid;
      gap: .5rem;
      align-items: center;
    }
    #md-sticky-atc .product-form__controls > *{ min-width: 0; }

    /* Variant selects – align to original styling */
    #md-sticky-atc .variant-controls{
      display: grid;
      gap: .5rem;
      width: 100%;
      grid-column: 1 / -1;
      grid-template-columns: 1fr;
    }
    #md-sticky-atc .variant-option__select-wrapper{
      margin-top: 0;
      min-height: var(--height-buy-buttons);
      border: var(--style-border-width) solid var(--color-variant-border);
    }
    #md-sticky-atc .variant-option__select{
      padding-block: 0;
      outline: none;
      box-shadow: none;
    }
    #md-sticky-atc .variant-option__select:focus,
    #md-sticky-atc .variant-option__select:active,
    #md-sticky-atc .variant-option__select:focus-visible{
      outline: none;
      box-shadow: none;
      border-color: var(--color-variant-border);
    }
    #md-sticky-atc .variant-option__select-wrapper:focus-within{
      outline: none;
      box-shadow: none;
      border-color: var(--color-variant-border);
    }
    #md-sticky-atc .variant-controls[data-option-count="1"]{
      grid-template-columns: 1fr;
    }
    #md-sticky-atc .variant-controls[data-option-count="2"]{
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }
    #md-sticky-atc .variant-controls[data-option-count="3"]{
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    @media (max-width: 989px){
      #md-sticky-atc .product-form__controls{
        grid-template-columns: repeat(2, minmax(0, 1fr));
        align-items: stretch;
        gap: .5rem;
        margin-bottom: .5rem; /* Space above button */
      }
      #md-sticky-atc .product-form__controls[data-variant-count="0"]{
        grid-template-columns: 1fr;
        gap: 0;
        margin-bottom: 1rem; /* More space when no variants */
      }
      #md-sticky-atc.no-qty .product-form__controls[data-variant-count="1"]{
        grid-template-columns: 1fr;
        gap: 0;
        margin-bottom: 0; /* No extra space when single variant, no qty */
      }
      
      /* Button wrapper - completely outside grid */
      #md-sticky-atc .product-form__submit-wrapper{
        width: 100%;
      }
      #md-sticky-atc .product-form__submit.button{
        width: 100%; /* Full width always - no grid constraints */
      }
      
      /* Adjust margins for different configurations */
      #md-sticky-atc.no-variant.no-qty.no-product-info .product-form__controls{
        gap: 0;
        margin-bottom: 0;
      }
      #md-sticky-atc.no-qty.no-product-info .product-form__controls[data-variant-count="1"]{
        margin-bottom: .5rem;
      }
      #md-sticky-atc .product-form__controls[data-variant-count="2"] .variant-controls,
      #md-sticky-atc .product-form__controls[data-variant-count="3"] .variant-controls,
      #md-sticky-atc.no-qty .product-form__controls[data-variant-count="1"] .variant-controls{
        grid-column: 1 / -1;
      }
      #md-sticky-atc .quantity-selector{
        grid-column: span 1;
      }
      #md-sticky-atc .product-form__controls[data-variant-count="0"] .quantity-selector,
      #md-sticky-atc.no-qty .product-form__controls[data-variant-count="1"] .quantity-selector{
        grid-column: 1 / -1;
      }
      #md-sticky-atc:not(.no-qty) .product-form__controls[data-variant-count="1"] .variant-controls{
        grid-column: span 1;
      }
      #md-sticky-atc:not(.no-qty) .product-form__controls[data-variant-count="1"] .variant-controls > *{
        width: 100%;
      }
      #md-sticky-atc:not(.no-qty) .product-form__controls[data-variant-count="1"] .quantity-selector{
        grid-column: span 1;
      }
    }
      /* Button margin adjustments for different configurations */
      #md-sticky-atc .product-form__controls[data-variant-count="0"] .product-form__submit.button{
        margin-top: 1rem;
      }
      #md-sticky-atc.no-qty .product-form__controls[data-variant-count="1"] .product-form__submit.button{
        margin-top: 0;
      }
      
      /* Remove margin and gap when all optional elements are disabled on mobile */
      #md-sticky-atc.no-variant.no-qty.no-product-info .product-form__controls{
        gap: 0;
      }
      #md-sticky-atc.no-variant.no-qty.no-product-info .product-form__submit.button{
        margin-top: 0;
      }
      
      /* Add gap when only one variant option is available (no product info, no qty) */
      #md-sticky-atc.no-qty.no-product-info .product-form__controls[data-variant-count="1"] .product-form__submit.button{
        margin-top: .5rem;
      }
    }

    /* Add to cart – uses Horizon primary .button styles */
    #md-sticky-atc .product-form__submit.button{ 
      width: 100%; /* Full width on mobile */
      border-radius: var(--style-border-radius-buttons-primary); 
    }
    #md-sticky-atc .product-form__submit[disabled]{ opacity:.5; cursor:not-allowed; }
    
    /* Ensure proper add-to-cart button styling inheritance */
    #md-sticky-atc .add-to-cart-button {
      position: relative;
      overflow: hidden;
    }

    /* Desktop */
    @media (min-width: 990px){
      #md-sticky-atc .page-width-inner{
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 2rem;
        flex-wrap: nowrap;
        max-width: 100%;
      }
      #md-sticky-atc .product-content{
        flex: 0 1 auto;
        min-width: 0;
        max-width: 40%;
      }
      #md-sticky-atc .sticky-product-media{
        max-width: 100%;
      }
      #md-sticky-atc .sticky-product-info{
        flex: 1;
      }
      #md-sticky-atc .product-form,
      #md-sticky-atc product-form-component {
        flex: 1 1 auto;
        max-width: 60%;
        min-width: 0;
        display: flex;
        align-items: stretch;
        gap: .75rem;
      }
      
      /* Controls container on desktop */
      #md-sticky-atc .product-form__controls{
        display: flex;
        align-items: stretch;
        gap: .75rem;
        flex-wrap: nowrap;
        min-width: 0;
        justify-content: flex-end;
        flex: 1 1 auto;
        margin-bottom: 0; /* Reset mobile margin */
      }
      #md-sticky-atc.no-variant .product-form__controls{
        justify-content: flex-end;
      }
      
      /* Button wrapper on desktop */
      #md-sticky-atc .product-form__submit-wrapper{
        flex: 0 0 auto;
        width: auto; /* Reset mobile width */
      }
      #md-sticky-atc .product-form__submit.button{
        width: auto; /* Natural width on desktop */
        min-width: 140px; /* Ensure minimum usable width */
      }
      #md-sticky-atc .variant-controls{
        display: flex;
        flex: 1 1 auto;
        gap: .5rem;
        min-width: 0;
      }
      #md-sticky-atc .variant-controls > *{
        flex: 1 1 0;
        min-width: 0;
      }
      #md-sticky-atc .variant-controls[data-option-count="1"]{
        flex: 0 0 auto;
        width: clamp(140px, 185px, 185px);
        min-width: 140px;
        max-width: 185px;
      }
      #md-sticky-atc .variant-controls[data-option-count="1"] > *{
        flex: 1;
        width: 100%;
      }
      #md-sticky-atc .quantity-selector{
        flex: 0 0 auto;
        width: clamp(80px, var(--quantity-selector-width, 120px), 120px);
        align-self: stretch;
      }
    }
  </style>

  <script>
    window.addEventListener('DOMContentLoaded', () => {
      const bar = document.getElementById('md-sticky-atc');
      if (!bar) return;

      // Elements
      const imgEl = bar.querySelector('.product-content img');
      const priceEl = bar.querySelector('.sticky-product-price');
      const controls = bar.querySelector('.product-form__controls');
      const variantControls = bar.querySelector('.variant-controls');
      const stickyOptionSelects = variantControls
        ? Array.from(variantControls.querySelectorAll('.variant-option__select'))
        : [];
      const stickySelect = bar.querySelector('.select--variant-id select[data-sticky]');
      const stickyHiddenInput = bar.querySelector('input[ref="variantId"]');
      const variantsDataEl = bar.querySelector('[data-sticky-variants]');
      const variants = variantsDataEl ? JSON.parse(variantsDataEl.textContent) : [];
      if (variantsDataEl) variantsDataEl.remove();
      let currentVariantId = stickySelect ? String(stickySelect.value) : null;
      let isSyncingOptionSelects = false;
      const qtyWrapper = bar.querySelector('.quantity-selector');
      const qtyInput = qtyWrapper ? qtyWrapper.querySelector('.quantity__input') : null;
      const minusBtn = qtyWrapper ? qtyWrapper.querySelector('.quantity__button[name="minus"]') : null;
      const plusBtn  = qtyWrapper ? qtyWrapper.querySelector('.quantity__button[name="plus"]') : null;
      const stickyAddBtn = bar.querySelector('button[name="add"]');
      
      // The add-to-cart-component automatically handles click and animation
      const stickyFallbackMedia = stickyAddBtn ? stickyAddBtn.dataset.productVariantMedia : '';
      const cartIcon = document.querySelector('.header-actions__cart-icon');

      const setVariantCountAttributes = (hasVisibleVariants) => {
        const optionCount = stickyOptionSelects.length;
        if (variantControls) {
          variantControls.setAttribute('data-option-count', optionCount);
        }
        if (controls) {
          controls.setAttribute('data-variant-count', hasVisibleVariants ? optionCount : 0);
        }
      };

      // Main PDP add button (outside sticky)
      const allAddBtns = document.querySelectorAll('button[name="add"]');
      let mainAddBtn = null;
      allAddBtns.forEach(btn => { if (!bar.contains(btn) && !mainAddBtn) mainAddBtn = btn; });
      const mainAddComponent = mainAddBtn ? mainAddBtn.closest('add-to-cart-component') : null;

      // Main form + main variant control
      const mainForm = mainAddBtn ? mainAddBtn.closest('form') : null;
      const mainVariantControl =
        (mainForm && (mainForm.querySelector('input[name="id"]') || mainForm.querySelector('select[name="id"]'))) ||
        document.querySelector('form[action*="/cart/add"] input[name="id"], form[action*="/cart/add"] select[name="id"]');

      const setMediaFromVariant = (variant) => {
        if (!stickyAddBtn || !variant) return;
        let previewSrc = null;
        if (variant.featured_media && variant.featured_media.preview_image) {
          previewSrc = variant.featured_media.preview_image.src;
        }
        if (previewSrc) {
          const connector = previewSrc.includes('?') ? '&' : '?';
          stickyAddBtn.dataset.productVariantMedia = `${previewSrc}${connector}width=120`;
        } else if (stickyFallbackMedia) {
          stickyAddBtn.dataset.productVariantMedia = stickyFallbackMedia;
        } else {
          delete stickyAddBtn.dataset.productVariantMedia;
        }
      };

      const findVariantById = (variantId) =>
        variants.find((variant) => String(variant.id) === String(variantId));

      const updateOptionSelectorsFromVariant = (variant) => {
        if (!variant || !stickyOptionSelects.length) return;
        isSyncingOptionSelects = true;
        stickyOptionSelects.forEach((select) => {
          const position = Number(select.dataset.optionPosition);
          if (!position) return;
          const optionValue = variant[`option${position}`];
          if (optionValue && select.value !== optionValue) {
            select.value = optionValue;
          }
        });
        isSyncingOptionSelects = false;
      };

      const findVariantFromOptionSelectors = () => {
        if (!stickyOptionSelects.length || !variants.length) return null;
        const selections = stickyOptionSelects.map((select) => ({
          position: Number(select.dataset.optionPosition),
          value: select.value,
        }));
        return variants.find((variant) =>
          selections.every(({ position, value }) => position && variant[`option${position}`] === value)
        );
      };

      const setStickyVariant = (variantId, { source = 'external', variantData = null } = {}) => {
        if (!variantId || !stickySelect || !stickyHiddenInput) return;
        
        // Find the option element with variant data
        const target = stickySelect.querySelector(`option[value="${variantId}"]`);
        if (!target) return;
        
        // Update both the select dropdown and hidden input
        if (stickySelect.value !== String(variantId)) {
          stickySelect.value = String(variantId);
        }
        if (stickyHiddenInput.value !== String(variantId)) {
          stickyHiddenInput.value = String(variantId);
        }
        currentVariantId = String(variantId);
        
        // Update UI elements using option data attributes
        updateStickyFromOption(target);
        
        // Get variant data and update option selectors
        const variant = variantData || findVariantById(variantId);
        if (variant) {
          if (source !== 'options') {
            updateOptionSelectorsFromVariant(variant);
          }
          setMediaFromVariant(variant);
        }
        
        // Sync with main product form
        const mainVariantControl = document.querySelector('[name="id"]:not([data-sticky])');
        if (source !== 'external' && mainVariantControl) {
          if (mainVariantControl.tagName === 'SELECT' && mainVariantControl.value !== stickySelect.value) {
            mainVariantControl.value = stickySelect.value;
            mainVariantControl.dispatchEvent(new Event('change', { bubbles: true }));
          } else if (mainVariantControl.tagName === 'INPUT' && mainVariantControl.value !== stickySelect.value) {
            mainVariantControl.value = stickySelect.value;
            mainVariantControl.dispatchEvent(new Event('change', { bubbles: true }));
          }
        }
      };

      // Function to update sticky ATC position based on bottom navigation bar
      const updateStickyPosition = () => {
        const bottomNavElement = document.querySelector('.bottom-menu');
        
        if (bottomNavElement && bottomNavElement.offsetParent !== null) {
          // Bottom navigation bar is visible, position sticky ATC above it
          const bottomMenuHeight = getComputedStyle(document.documentElement).getPropertyValue('--bottom-menu-height') || '0px';
          bar.style.bottom = bottomMenuHeight;
          console.log('Sticky ATC positioned above bottom nav bar, height:', bottomMenuHeight);
        } else {
          // No bottom navigation bar, position at bottom
          bar.style.bottom = '0px';
          console.log('Sticky ATC positioned at viewport bottom, no bottom nav detected');
        }
      };

      // Show sticky only after default ATC disappears (on mobile, after it has been seen once)
      const isMobile = window.matchMedia('(max-width: 989px)').matches;
      let hasSeenDefaultATC = !isMobile;

      const setShown = (shown) => {
        bar.classList.toggle('show', shown);
        bar.setAttribute('aria-hidden', shown ? 'false' : 'true');
        
        // Update position when showing
        if (shown) {
          updateStickyPosition();
        }
        
        // Calculate bottom offset for body padding
        // Check if there's a bottom navigation bar that would affect positioning
        const hasBottomNav = document.querySelector('.bottom-menu');
        
        // If bottom nav is enabled, the sticky ATC is positioned above it, so no body padding needed
        const bottomOffset = hasBottomNav ? 0 : bar.clientHeight;
        
        document.body.style.paddingBottom = shown ? `${bottomOffset}px` : '0';
      };

      const header = document.querySelector('sticky-header, header[is-sticky], .shopify-section-header-sticky');
      const headerH = header ? header.offsetHeight : 0;
      const rootMargin = `-${headerH}px 0px -40px 0px`;

      if (mainAddBtn && 'IntersectionObserver' in window) {
        const io = new IntersectionObserver((entries) => {
          const entry = entries[0];
          if (isMobile && entry.isIntersecting) hasSeenDefaultATC = true;
          setShown(!entry.isIntersecting && (!isMobile || hasSeenDefaultATC));
        }, { root: null, threshold: 0, rootMargin });
        io.observe(mainAddBtn);
      } else {
        const threshold = (mainAddBtn ? (mainAddBtn.getBoundingClientRect().bottom + window.scrollY) : 80) - 1;
        const onScroll = () => setShown(window.scrollY > threshold && (!isMobile || hasSeenDefaultATC));
        window.addEventListener('scroll', onScroll, { passive: true });
        onScroll();
      }

      // Keep padding in sync on resize
      window.addEventListener('resize', () => {
        if (bar.classList.contains('show')) {
          updateStickyPosition();
          
          const hasBottomNav = document.querySelector('.bottom-menu');
          const bottomOffset = hasBottomNav ? 0 : bar.clientHeight;
          document.body.style.paddingBottom = `${bottomOffset}px`;
        }
      });
      
      // Watch for bottom navigation changes (in case it's added/removed dynamically)
      const bottomNavElement = document.querySelector('.bottom-menu');
      if (bottomNavElement) {
        const bottomNavObserver = new MutationObserver(() => {
          if (bar.classList.contains('show')) {
            updateStickyPosition();
          }
        });
        bottomNavObserver.observe(bottomNavElement, { childList: true, subtree: true });
      }
      
      // Also listen for CSS custom property changes to --bottom-menu-height
      const rootObserver = new MutationObserver(() => {
        if (bar.classList.contains('show')) {
          updateStickyPosition();
        }
      });
      rootObserver.observe(document.documentElement, { 
        attributes: true, 
        attributeFilter: ['style'] 
      });

      // ---- Variant/price/button sync ----
      function updateStickyFromOption(opt){
        if (!opt) return;
        const dataImg = opt.dataset.img;
        const priceHtml = opt.dataset.priceHtml;
        const available = opt.dataset.available === 'true';
        const animationImg = opt.dataset.animationImg;

        if (imgEl && dataImg) imgEl.setAttribute('src', dataImg);
        if (priceEl && priceHtml) priceEl.innerHTML = priceHtml;

        if (stickyAddBtn){
          stickyAddBtn.disabled = !available;
          // Don't manually update button text - let the add-to-cart-component handle it
          if (animationImg) {
            stickyAddBtn.dataset.productVariantMedia = animationImg;
          } else if (stickyFallbackMedia) {
            stickyAddBtn.dataset.productVariantMedia = stickyFallbackMedia;
          } else {
            delete stickyAddBtn.dataset.productVariantMedia;
          }
        }
      }
      document.addEventListener('variant:change', (e) => {
        const v = e.detail && e.detail.variant;
        if (v && v.id) setStickyVariant(v.id, { source: 'external', variantData: v });
      });
      document.addEventListener('variantChange', (e) => {
        const detail = e.detail && (e.detail.variant || e.detail);
        if (detail && detail.id) {
          setStickyVariant(detail.id, { source: 'external', variantData: detail });
        }
      });

      if (mainVariantControl){
        const onMainVariantChange = () => {
          const id = mainVariantControl.value || mainVariantControl.getAttribute('value');
          if (id) setStickyVariant(id, { source: 'external', variantData: findVariantById(id) });
        };
        mainVariantControl.addEventListener('change', onMainVariantChange);
        if ('MutationObserver' in window){
          const mo = new MutationObserver(onMainVariantChange);
          mo.observe(mainVariantControl, { attributes: true, attributeFilter: ['value'] });
        }
      }

      // Add event listener for variant dropdown changes
      if (stickySelect) {
        stickySelect.addEventListener('change', () => {
          const selectedId = stickySelect.value;
          if (selectedId) {
            setStickyVariant(selectedId, { source: 'select', variantData: findVariantById(selectedId) });
          }
        });
      }

      // Initialize with current variant value
      if (stickySelect && stickySelect.value) {
        setStickyVariant(stickySelect.value, {
          source: 'external',
          variantData: findVariantById(stickySelect.value),
        });
      } else if (variants.length) {
        const fallbackVariant = variants.find((variant) => variant.available) || variants[0];
        if (fallbackVariant) {
          setStickyVariant(fallbackVariant.id, { source: 'external', variantData: fallbackVariant });
        }
      }
      if (stickyOptionSelects.length){
        stickyOptionSelects.forEach((select) => {
          select.addEventListener('change', () => {
            if (isSyncingOptionSelects) return;
            const variant = findVariantFromOptionSelectors();
            if (variant) {
              setStickyVariant(variant.id, { source: 'options', variantData: variant });
            } else if (currentVariantId) {
              const currentVariant = findVariantById(currentVariantId);
              updateOptionSelectorsFromVariant(currentVariant);
            }
          });
        });
      }

      const animateFlyToCart = () => {
        if (!stickyAddBtn) return;
        if (stickyAddBtn.dataset.addToCartAnimation !== 'true') return;
        if (!cartIcon) return;
        const media = stickyAddBtn.dataset.productVariantMedia;
        if (!media) return;

        const flyToCartElement = /** @type {FlyToCart} */ (document.createElement('fly-to-cart'));
        flyToCartElement.style.setProperty('background-image', `url(${media}`);
        flyToCartElement.source = stickyAddBtn;
        flyToCartElement.destination = cartIcon;
        document.body.appendChild(flyToCartElement);
      };

      // Quantity control
      if (minusBtn && qtyInput){
        minusBtn.addEventListener('click', () => {
          const n = parseInt(qtyInput.value || '1', 10);
          if (n > 1) qtyInput.value = String(n - 1);
        });
      }
      if (plusBtn && qtyInput){
        plusBtn.addEventListener('click', () => {
          const n = parseInt(qtyInput.value || '1', 10);
          qtyInput.value = String(n + 1);
        });
      }

      // The add-to-cart-component automatically handles click and animation
      // No need for custom click handler - let the component work

      // ---- Layout optimization (no empty space when controls are hidden) ----
      function updateLayoutFlags(){
        const hasVariant = !!(variantControls && stickyOptionSelects.length && variantControls.offsetParent !== null);
        const hasQty = !!(qtyWrapper && qtyWrapper.offsetParent !== null);
        const productContent = bar.querySelector('.product-content');
        const hasProductInfo = !!(productContent && productContent.children.length > 0 && getComputedStyle(productContent).display !== 'none');
        setVariantCountAttributes(hasVariant);
        bar.classList.toggle('no-variant', !hasVariant);
        bar.classList.toggle('no-qty', !hasQty);
        bar.classList.toggle('no-product-info', !hasProductInfo);
        
        // Debug logging
        console.log('Layout flags:', {
          hasVariant,
          hasQty,
          hasProductInfo,
          classes: Array.from(bar.classList)
        });
      }
      updateLayoutFlags();
      window.addEventListener('resize', updateLayoutFlags);
    });
  </script>

  <div
    id="md-sticky-atc"
    class="color-{{ section.settings.color_scheme }}"
    aria-hidden="true"
    role="region"
    aria-label="Sticky add to cart"
  >
    <div class="md-sticky-atc__bg" aria-hidden="true"></div>

    <div class="md-sticky-atc__inner">
      <div class="page-width">
        <div class="page-width-inner">
          <!-- Product summary -->
          <div class="product-content">
            {% if section.settings.show_img %}
              <div class="sticky-product-media">
                {% if image %}
                  <img
                    src="{{ image | image_url: width: 60, height: 60, crop: 'center' }}"
                    alt="{{ product.title | escape }}"
                    width="60"
                    height="60"
                    loading="lazy">
                {% endif %}
                <div class="sticky-product-info">
                  <div class="sticky-product-title">{{ product.title }}</div>
                  <div class="sticky-product-price price">{{ current_variant.price | money }}</div>
                </div>
              </div>
            {% endif %}
          </div>

          <!-- Controls -->
          <product-form-component
            data-section-id="{{ section.id }}"
            data-product-id="{{ product.id }}"
            data-product-url="{{ product.url }}"
            on:submit="/handleSubmit"
            data-quantity-default="{% if product.selected_or_first_available_variant.quantity_rule.min %}{{ product.selected_or_first_available_variant.quantity_rule.min }}{% else %}1{% endif %}"
          >
            <div
              class="visually-hidden"
              aria-live="assertive"
              role="status"
              aria-atomic="true"
              ref="liveRegion"
            ></div>
            {%- form 'product', product, id: product_form_id, class: 'form', data-type: 'add-to-cart-form' -%}
              <input
                type="hidden"
                name="id"
                ref="variantId"
                value="{{ current_variant.id }}"
              >
              {% assign controls_variant_count = 0 %}
              {% if variant_option_count > 0 and section.settings.show_variant_picker %}
                {% assign controls_variant_count = variant_option_count %}
              {% endif %}
                            <div class="product-form__controls" data-variant-count="{{ controls_variant_count }}">
                {% if variant_option_count > 0 and section.settings.show_variant_picker %}
                  <div class="variant-controls" data-option-count="{{ variant_option_count }}">
                    {% for option in product.options_with_values %}
                      {% assign sticky_option_id = 'StickyOption-' | append: section.id | append: '-' | append: forloop.index0 %}
                      <div class="variant-option variant-option--dropdowns">
                        <label class="visually-hidden" for="{{ sticky_option_id }}">{{ option.name | escape }}</label>
                        <div class="variant-option__select-wrapper">
                          <select
                            id="{{ sticky_option_id }}"
                            name="options[{{ option.name | escape }}]"
                            class="variant-option__select"
                            aria-label="{{ option.name | escape }}"
                            data-option-position="{{ option.position }}"
                          >
                            <option value="" disabled {% if option.selected_value == blank %}selected{% endif %}>
                              {{ '-- ' | append: option.name | append: ' --' | escape }}
                            </option>
                          {% for option_value in option.values %}
                            <option
                              value="{{ option_value | escape }}"
                              {% if option_value.selected %}selected{% endif %}
                            >
                              {{ option_value | escape }}
                            </option>
                          {% endfor %}
                          </select>
                          <svg aria-hidden="true" focusable="false" class="icon icon-caret" viewBox="0 0 10 6">
                            {% render 'icon', icon: 'caret' %}
                          </svg>
                        </div>
                      </div>
                    {% endfor %}
                  </div>
                {% endif %}

                <!-- Quantity (toggle via setting) -->
                {% if section.settings.show_qty %}
                  <div class="quantity-selector">
                    <button
                      class="button button-unstyled quantity-minus quantity__button"
                      name="minus"
                      type="button"
                    >
                      <span class="visually-hidden">{{ 'accessibility.decrease_quantity' | t }}</span>
                      <span class="svg-wrapper icon-minus">
                        {{- 'icon-minus.svg' | inline_asset_content -}}
                      </span>
                    </button>
                    <input
                      class="quantity__input"
                      type="number"
                      name="quantity"
                      id="Quantity-{{ section.id }}"
                      min="1"
                      value="1"
                      form="{{ product_form_id }}"
                      inputmode="numeric"
                      aria-label="{{ 'accessibility.quantity' | t }}"
                    >
                    <button
                      class="button button-unstyled quantity-plus quantity__button"
                      name="plus"
                      type="button"
                    >
                      <span class="visually-hidden">{{ 'accessibility.increase_quantity' | t }}</span>
                      <span class="svg-wrapper icon-plus">
                        {{- 'icon-plus.svg' | inline_asset_content -}}
                      </span>
                    </button>
                  </div>
                {% endif %}

                <!-- Variant id select kept for data + switching functionality -->
                <div class="select select--variant-id" style="display:none;">
                  <select name="id" aria-label="Select variant" data-sticky>
                    {% for variant in product.variants %}
                      {% assign variant_image = variant.image | default: product.featured_image %}
                      <option
                        value="{{ variant.id }}"
                        data-img="{% if variant_image %}{{ variant_image | image_url: width: 60, height: 60, crop: 'center' }}{% endif %}"
                        data-price-html="{{ variant.price | money }}"
                        data-animation-img="{% if variant_image %}{{ variant_image | image_url: width: 120 }}{% endif %}"
                        data-available="{{ variant.available }}"
                        {% if current_variant.id == variant.id %}selected{% endif %}
                      >
                        {{ variant.title }} - {{ variant.price | money }}
                      </option>
                    {% endfor %}
                  </select>
                </div>

                <script type="application/json" data-sticky-variants>
                  {{ product.variants | json }}
                </script>
              </div>

              <!-- Add to cart button - outside grid -->
              {% liquid
                if current_variant and current_variant.available
                  assign can_add_to_cart = true
                  assign add_to_cart_text = 'products.product.add_to_cart' | t
                else
                  assign can_add_to_cart = false
                  assign add_to_cart_text = 'products.product.sold_out' | t
                endif
                assign sticky_button_id = 'BuyButtons-ProductSubmitButton-' | append: section.id
              %}
              
              <div class="product-form__submit-wrapper">
                <span style="--add-to-cart-font-case: {{ settings.button_text_case }};">
                  {% render 'add-to-cart-button',
                    id: sticky_button_id,
                    class: 'add-to-cart-button product-form__submit button',
                    can_add_to_cart: can_add_to_cart,
                    product: product,
                    add_to_cart_text: add_to_cart_text
                  %}
                </span>
              </div>
            {%- endform -%}
          </product-form-component>
        </div>
      </div>
    </div>
  </div>
{% endif %}

{% schema %}
{
  "name": "Sticky ATC",
  "settings": [
    { "type": "header", "content": "General" },
    { "type": "checkbox", "id": "enable_section", "label": "Enable \"Sticky ATC\"", "default": true },
    { "type": "checkbox", "id": "mobile_only", "label": "Show mobile screen only", "default": false },
    { "type": "color_scheme", "id": "color_scheme", "label": "Color scheme", "default": "scheme-1" },
    { "type": "paragraph", "content": "Note: When bottom menu is enabled in the header, the sticky add to cart will automatically position itself above the menu bar." },

    { "type": "header", "content": "Controls" },
    { "type": "checkbox", "id": "show_qty", "label": "Show quantity picker", "default": true },
    { "type": "checkbox", "id": "show_variant_picker", "label": "Show variant picker", "default": true },
    { "type": "checkbox", "id": "show_img", "label": "Show product image, title and price", "default": true },

    { "type": "header", "content": "Positioning" },
    { "type": "paragraph", "content": "Note: When a bottom navigation bar is enabled, the sticky add to cart will automatically position itself above the navigation bar. The height can be adjusted in the bottom navigation bar section settings." },

    { "type": "header", "content": "Spacing" },
    { "type": "range", "id": "pt", "label": "Padding top (rem)", "min": 0, "max": 5, "step": 0.5, "default": 0.5 },
    { "type": "range", "id": "pb", "label": "Padding bottom (rem)", "min": 0, "max": 5, "step": 0.5, "default": 0.5 }
  ],
  "presets": [{ "name": "Sticky ATC" }]
}
{% endschema %}